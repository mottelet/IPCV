<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from imnoise.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="imnoise" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>imnoise</refname>
    <refpurpose>Add noise (gaussian, etc.) to an image</refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Syntax</title>
   <synopsis>
   imn = imnoise(im, type [,parameters])
   
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Parameters</title>
   <variablelist>
   <varlistentry><term>im :</term>
      <listitem><para> Input image.</para></listitem></varlistentry>
   <varlistentry><term>type :</term>
      <listitem><para> String having one of these values:</para></listitem></varlistentry>
   <varlistentry><term>'salt &amp; pepper' :</term>
      <listitem><para> drop-out/On-off noise</para></listitem></varlistentry>
   <varlistentry><term>'speckle' :</term>
      <listitem><para> multiplicative noise</para></listitem></varlistentry>
   <varlistentry><term>'gaussian' :</term>
      <listitem><para> Gaussian white/additive noise</para></listitem></varlistentry>
   <varlistentry><term>'localvar' :</term>
      <listitem><para> Pixel-specific variance (Zero-mean Gaussian)</para></listitem></varlistentry>
   <varlistentry><term>'poisson' :</term>
      <listitem><para> Not yet implemented</para></listitem></varlistentry>
   <varlistentry><term>parameters :</term>
      <listitem><para> A sequence of parameters to control the noise distribution, depending on the chosen type. If omitted, default values are used (see below).</para></listitem></varlistentry>
   <varlistentry><term>imn :</term>
      <listitem><para> Noisy image, which has the same size and type as input image im .</para></listitem></varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
imnoise(im, type [, parameters]) adds a type of noise to the intensity image im. Optionally, you can control the noise parameters starting at the 3rd. Argument to imnoise. Here are example of noise types and their parameterss:
   </para>
   <para>
imn = imnoise(im,'salt &amp; pepper',d) adds drop-out noise, where d is the noise density (probability of swapping a pixel). (default: d=0.05).
   </para>
   <para>
imn = imnoise(im,'gaussian',m,v) adds Gaussian additive noise of mean m and variance v. (default: m=0 and v=0.01)
   </para>
   <para>
im = imnoise(im,'localvar',V) additive zero-mean Gaussian noise where the variance at im(i,j) is V(i,j).
   </para>
   <para>
imn = imnoise(im,'localvar', intensity, V) additive zero-mean Gaussian noise, and the local variance of the noise, var, is a function of the image intensity values in im. The variance is matrix( interp1(intensity(:),V(:),im(:)), size(im) )
   </para>
   <para>
imn = imnoise(im,'speckle',v) adds multiplicative noise, using imn = im + noise*im, where noise is uniformly distributed with mean 0 and variance v. (default: v=0.04)
   </para>
   <para>
By default, we consider that "1" corresponds to the maximum intensity value of the image, and "0" to minimum. If the input image im is an integer image, it will be converted to double using im2double function first. Before return the result, the image will be converted to the same type as the input image. The elements in the output matrix imn that exceed the range of the integer or double type will be truncated.
   </para>
   <para>
Supported classes: INT8, UINT8, INT16, UINT16, INT32, DOUBLE.
   </para>
   <para>
</para>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
im = imread(fullpath(getIPCVpath() + "/images/" + 'baboon.png'));

imn = imnoise(im, 'gaussian');
imshow(imn);

imn = imnoise(im, 'salt & pepper');
imshow(imn);

imn = imnoise(im(:,:,1), 'salt & pepper', 0.2);
imshow(imn);

lowtri = tril(ones(im(:,:,1)));
imn = imnoise( im(:,:,1), 'localvar', lowtri/5);
imshow(imn);

imn = imnoise( im(:,:,1), 'localvar', [0:0.1:1], [0:0.1:1].^3);
imshow(imn);

imn = imnoise(im, 'speckle' );
imshow(imn);

   ]]></programlisting>
</refsection>

<refsection>
   <title>See also</title>
   <simplelist type="inline">
   <member><link linkend="imfilter">imfilter</link></member>
   </simplelist>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>Shiqi Yu</member>
   <member>Ricardo Fabbri</member>
   <member>Tan Chin Luh</member>
   </simplelist>
</refsection>
</refentry>
